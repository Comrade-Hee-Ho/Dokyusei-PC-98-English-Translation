(mes
 (meta (engine 'AI5) (charset "English") (dictbase 128))
 (dict #\u3000 #\ã‚‹)
 (set-arr~ @ 7 1)
 (set-arr~ @ 3 0)
 (set-arr~ @ 2 45056)
 (define-proc 10
   (<>
    (palette 3 0)
    (set-arr~ @ 7 1)
    (set-arr~ @ 1 4096)
    (set-arr~ @ 9 (// (~ @ 9) 1))
    (set-arr~ @ 6 0)
    (image "waku.pd8")
    (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
    (set-arr~ @ 21 (+ 512 16))
    (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
    (set-arr~ @ 20 (&& (~ @ 20) 4095))
    (color 7)
    (set-arr~ @ 6 0)
    (set-arr~ @ 13 15 322 64 391)
    (clear)
    (proc 11)
    (proc 14)))
 (define-proc 11
   (<>
    (set-arr~ @ 13 0 0 79 399)
    (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
    (set-arr~ @ 21 (+ 512 16))
    (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
    (set-arr~ @ 20 (&& (~ @ 20) 4095))
    (color 7)
    (set-arr~ @ 6 0)
    (box 67 370 (+ 67 11) (+ 370 17))
    (set-var I M)
    (set-var J 0)
    (while
     (!= J 6)
     (<>
      (if-else (== I 0)
        (<>
         (blit
          (+ 40 (* 10 2))
          105
          (+ 40 (* 10 2) 1)
          122
          3
          (- (+ 67 10) (* J 2))
          370
          0)
         (set-var I (/ I 10))
         (break))
        (<>
         (blit
          (+ 40 (* (% I 10) 2))
          105
          (+ 40 (* (% I 10) 2) 1)
          122
          3
          (- (+ 67 10) (* J 2))
          370
          0)
         (set-var I (/ I 10))))
      (set-var J (+ J 1))))
    (blit (+ 40 (* (/ H 100) 2)) 130 (+ 40 (* (/ H 100) 2) 1) 147 3 3 328 0)
    (blit
     (+ 40 (* (/ (% H 100) 10) 2))
     130
     (+ 40 (* (/ (% H 100) 10) 2) 1)
     147
     3
     7
     328
     0)
    (blit
     (+ 40 (* (% (% H 100) 10) 2))
     130
     (+ 40 (* (% (% H 100) 10) 2) 1)
     147
     3
     9
     328
     0)
    (blit
     (* (% E 4) 12)
     (* (/ E 4) 40)
     (+ (* (% E 4) 12) 11)
     (+ (* (/ E 4) 40) 37)
     3
     1
     349
     0)
    (set-var I (/ T 100 12))
    (blit (+ 36 (* I 2)) 40 (+ 36 (* I 2) 1) (+ 40 37) 3 67 328 0)
    (if-else (== I 0)
      (<> (set-var I (/ T 100)))
      (<> (set-var I (- (/ T 100) 12))))
    (blit
     (+ 42 (* (/ I 10) 2))
     40
     (+ 42 (* (/ I 10) 2) 1)
     (+ 40 37)
     3
     69
     328
     0)
    (blit
     (+ 42 (* (% I 10) 2))
     40
     (+ 42 (* (% I 10) 2) 1)
     (+ 40 37)
     3
     71
     328
     0)
    (blit 40 40 41 (+ 40 37) 3 73 328 0)
    (set-var I (% T 100))
    (blit
     (+ 42 (* (/ I 10) 2))
     40
     (+ 42 (* (/ I 10) 2) 1)
     (+ 40 37)
     3
     75
     328
     0)
    (blit
     (+ 42 (* (% I 10) 2))
     40
     (+ 42 (* (% I 10) 2) 1)
     (+ 40 37)
     3
     77
     328
     0)
    (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
    (set-arr~ @ 21 (+ 512 16))
    (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
    (set-arr~ @ 20 (&& (~ @ 20) 4095))
    (color 8)
    (set-arr~ @ 6 0)
    (set-arr~ @ 13 15 322 64 391)
    (clear)))
 (define-proc 12
   (<>
    (set-var I (+ (% T 100) A))
    (set-var T (/ T 100))
    (set-var T (+ T (/ I 60)))
    (set-var I (% I 60))
    (set-var T (+ (* T 100) I))
    (if (> (/ T 100) 23)
      (<>
       (cond
        ((== (/ H 100) 7) (<> (set-var J 31)))
        ((== (/ H 100) 8) (<> (set-var J 32)))
        (else (<> (set-var J 31))))
       (set-var E (+ E (/ T 100 24)))
       (if (> E 6) (<> (set-var E (% E 7))))
       (set-var I (+ (% H 100) (/ T 100 24)))
       (set-var H (/ H 100))
       (set-var H (+ (* (+ H (/ I J)) 100) (% I J)))
       (set-var T (+ (% T 100) (* (% (/ T 100) 24) 100)))))))
 (define-proc 13
   (<>
    (set-var I (% T 100))
    (set-var T (+ (/ T 100) A))
    (set-var T (+ T (/ I 60)))
    (set-var I (% I 60))
    (set-var T (+ (* T 100) I))
    (if (> (/ T 100) 23)
      (<>
       (cond
        ((== (/ H 100) 7) (<> (set-var J 31)))
        ((== (/ H 100) 8) (<> (set-var J 32)))
        (else (<> (set-var J 31))))
       (set-var E (+ E (/ T 100 24)))
       (if (> E 6) (<> (set-var E (% E 7))))
       (set-var I (+ (% H 100) (/ T 100 24)))
       (set-var H (/ H 100))
       (set-var H (+ (* (+ H (/ I J)) 100) (% I J)))
       (set-var T (+ (% T 100) (* (% (/ T 100) 24) 100)))))))
 (define-proc 14
   (<>
    (if (== (: 1002) 0)
      (<>
       (set-var I (/ T 100))
       (cond
        ((&& (> I 6) (< I 16)) (<> (set-var J 61696)))
        ((// (> I 18) (< I 4)) (<> (set-var J 61952)))
        (else
         (<> (if-else (< I 7) (<> (set-var J 61440)) (<> (set-var J 62208))))))
       (set-var I 0)
       (while
        (!= I 7)
        (<>
         (set-arr~ @ (+ 31 I)
           (+
            (~b J (* I 3))
            (* (~b J (+ (* I 3) 1)) 16)
            (* (~b J (+ (* I 3) 2)) 256)))
         (set-var I (+ I 1))))
       (set-var I 9)
       (while
        (!= I 16)
        (<>
         (set-arr~ @ (+ 31 I)
           (+
            (~b J (* I 3))
            (* (~b J (+ (* I 3) 1)) 16)
            (* (~b J (+ (* I 3) 2)) 256)))
         (set-var I (+ I 1))))))))
 (define-proc 15
   (<>
    (proc 14)
    (palette 2)
    (set-var I 0)
    (while
     (!= I (/ (~ @ 97) 2))
     (<>
      (blit
       (~ @ 94)
       (+ (~ @ 95) (* I 2))
       (- (+ (~ @ 94) (~ @ 96)) 1)
       (+ (~ @ 95) (* I 2))
       1
       (~ @ 94)
       (+ (~ @ 95) (* I 2))
       0)
      (blit
       (~ @ 94)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       (- (+ (~ @ 94) (~ @ 96)) 1)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       1
       (~ @ 94)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       0)
      (set-var I (+ I 1))))
    (if (== (&& (~ @ 97) 1) 1)
      (<>
       (blit
        (~ @ 94)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        (- (+ (~ @ 94) (~ @ 96)) 1)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        1
        (~ @ 94)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        0)))
    (set-arr~ @ 6 0)))
 (define-proc 16
   (<>
    (proc 14)
    (palette 2)
    (set-var I 0)
    (while
     (!= I (/ (~ @ 97) 2))
     (<>
      (blit-mask
       (~ @ 94)
       (+ (~ @ 95) (* I 2))
       (- (+ (~ @ 94) (~ @ 96)) 1)
       (+ (~ @ 95) (* I 2))
       1
       (~ @ 94)
       (+ (~ @ 95) (* I 2))
       0)
      (blit-mask
       (~ @ 94)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       (- (+ (~ @ 94) (~ @ 96)) 1)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       1
       (~ @ 94)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       0)
      (set-var I (+ I 1))))
    (if (== (&& (~ @ 97) 1) 1)
      (<>
       (blit-mask
        (~ @ 94)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        (- (+ (~ @ 94) (~ @ 96)) 1)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        1
        (~ @ 94)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        0)))
    (set-arr~ @ 6 0)))
 (define-proc 17
   (<>
    (define-proc 30 (<>))
    (define-proc 31 (<>))
    (define-proc 32
      (<>
       (mouse 2)
       (set-var X (+ (~ @ 10) 8))
       (set-var Y (+ (~ @ 11) 8))
       (mouse 1)
       (if (!= (~ @ 23) 65535)
         (<>
          (set-arr~ @ 27 0)
          (set-var N (&& (~ @ 23) 255))
          (set-var V (+ (/ (~ @ 23) 256) 1))))
       (set-arr~ @ 23 65280)
       (set-arr~ @ 13 33 295 46 311)
       (color 7)
       (clear)
       (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
       (set-arr~ @ 21 (+ 256 16))
       (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
       (set-arr~ @ 20 (&& (~ @ 20) 4095))
       (color 8)
       (set-arr~ @ 6 0)
       (set-arr~ @ 13 15 322 64 391)
       (clear)
       (text-color 7)
       (if (!= (~ @ 27) 0) (<> (mouse 0)))))
    (define-proc 33
      (<>
       (mouse 1)
       (set-arr~ @ 27 0)
       (set-arr~ @ 23 0)
       (set-var V 0)
       (set-var N 0)
       (set-arr~ @ 23 65280)
       (set-arr~ @ 13 33 295 46 311)
       (color 7)
       (clear)
       (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
       (set-arr~ @ 21 (+ 512 16))
       (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
       (set-arr~ @ 20 (&& (~ @ 20) 4095))
       (color 8)
       (set-arr~ @ 6 0)
       (set-arr~ @ 13 15 322 64 391)
       (clear)
       (text-color 7)))
    (define-proc 34 (<>))
    (define-proc 35 (<>))
    (define-proc 36 (<>))
    (define-proc 37 (<>))
    (define-proc 38
      (<>
       (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
       (set-arr~ @ 21 (+ 256 16))
       (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
       (set-arr~ @ 20 (&& (~ @ 20) 4095))
       (color 8)
       (set-arr~ @ 6 0)
       (set-arr~ @ 13 15 322 64 391)
       (clear)
       (text #:color 7 "Click on the screen.")
       (set-arr~ @ 23 65280)
       (set-arr~ @ 13 33 295 46 311)
       (color 7)
       (clear)
       (mouse 4 49152)
       (mouse 0)))
    (define-proc 39
      (<>
       (mouse 2)
       (set-var X (+ (~ @ 10) 8))
       (set-var Y (+ (~ @ 11) 8))
       (click 47104 X Y)
       (set-var J S)
       (if (!= (~ @ 23) J)
         (<>
          (set-arr~ @ 23 J)
          (mouse 1)
          (set-arr~ @ 17 33 295)
          (color 7)
          (set-var I (+ (/ (~ @ 23) 256) 1))
          (cond
           ((== I 1)
            (<>
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
             (set-arr~ @ 21 (+ 256 16))
             (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
             (text "   Check")
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 2) (<> (text "    Talk") (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 3)
            (<>
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
             (set-arr~ @ 21 (+ 256 16))
             (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
             (text "    Hit")
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 4) (<> (text "   Push/Pull") (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 5) (<> (text "    Open") (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 6)
            (<>
             (text "")
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
             (set-arr~ @ 21 (+ 256 16))
             (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
             (text "   Take")
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 7)
            (<>
             (text "")
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
             (set-arr~ @ 21 (+ 256 16))
             (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
             (text "    Kiss")
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 8) (<> (text "    Touch") (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 9)
            (<>
             (text "")
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
             (set-arr~ @ 21 (+ 256 16))
             (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
             (text "    Rub")
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 10) (<> (text "    Lick") (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 11)
            (<>
             (text "          ")
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
             (set-arr~ @ 21 (+ 256 16))
             (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
             (text "  Bite")
             (set-arr~ @ 21 (+ 256 16))
             (str " ")
             (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 12) (<> (text "    XXX") (mouse 4 (+ 49152 (* 512 I)))))
           ((== I 13) (<> (text "    ???") (mouse 4 (+ 49152 (* 512 I)))))
           (else (<> (text "        ") (mouse 4 49152))))
          (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
          (set-arr~ @ 21 (+ 256 16))
          (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
          (mouse 0)))))))
 (define-proc 18
   (<>
    (define-proc 30
      (<>
       (mouse 1)
       (color 112)
       (set-var I (~ @ 23))
       (box-inv
        (+ 10 (* (: 101) 46))
        (+ (* I 16) 8 8)
        (+ 23 (* (: 101) 46))
        (+ (* I 16) 23 8))
       (mouse 0)))
    (define-proc 31
      (<>
       (color 112)
       (menu-init 1)
       (menu-init 0)
       (if-else (> (~ @ 26) 10)
         (<> (blit-mask (+ 0 16) 104 (+ 15 16) 111 3 (+ 9 (* (: 101) 46)) 8 0))
         (<> (blit-mask 0 104 15 111 3 (+ 9 (* (: 101) 46)) 8 0)))
       (set-var L (- (~ @ 26) (~ @ 24)))
       (if (> L 10) (<> (set-var L 10)))
       (set-var I 0)
       (while
        (!= I L)
        (<>
         (set-var J (~ @ 22))
         (blit 0 112 15 127 3 0 136 3)
         (if-else (== (: 1002) 0)
           (<>
            (set-arr~ @ 6 3)
            (color 135)
            (box 0 152 15 167)
            (set-arr~ @ 17 1 152)
            (call (~ J (* I 2)))
            (blit-mask 0 152 15 167 3 0 136 3)
            (blit-mask
             0
             136
             15
             151
             3
             (- (+ 10 (* (: 101) 46)) 1)
             (+ (* I 16) 8 8)
             0))
           (<>
            (set-arr~ @ 6 3)
            (color 7)
            (box 0 152 15 167)
            (set-arr~ @ 17 1 152)
            (call (~ J (* I 2)))
            (blit 1 152 14 167 3 1 136 3)
            (blit
             0
             136
             15
             151
             3
             (- (+ 10 (* (: 101) 46)) 1)
             (+ (* I 16) 8 8)
             0)))
         (set-var I (+ I 1))))
       (if-else (> (~ @ 26) 10)
         (<>
          (blit-mask
           (+ 0 16)
           128
           (+ 15 16)
           135
           3
           (+ 9 (* (: 101) 46))
           (+ (* I 16) 8 8)
           0))
         (<>
          (blit-mask 0 128 15 135 3 (+ 9 (* (: 101) 46)) (+ (* I 16) 8 8) 0)))
       (set-arr~ @ 6 0)
       (color 112)
       (set-arr~ @ 23 0)))
    (define-proc 32
      (<>
       (mouse 2)
       (set-var X (~ @ 10))
       (set-var Y (~ @ 11))
       (cond
        ((&&
          (> X (* (+ 9 (* (: 101) 46)) 8))
          (< X (* (+ 24 (* (: 101) 46)) 8))
          (> Y 0)
          (< Y (+ 8 8)))
         (<>
          (if (!= (~ @ 24) 0)
            (<>
             (set-arr~ @ 24 (- (~ @ 24) 10))
             (mouse 1)
             (blit 64 0 79 175 3 (+ 9 (* (: 101) 46)) 8 0)
             (proc 31)
             (mouse 0)
             (proc 30)))))
        ((&&
          (> X (* (+ 9 (* (: 101) 46)) 8))
          (< X (* (+ 24 (* (: 101) 46)) 8))
          (> Y (+ (* L 16) 8 8))
          (< Y (+ (* L 16) 23 16)))
         (<>
          (if (> (~ @ 26) (+ (~ @ 24) 10))
            (<>
             (set-arr~ @ 24 (+ (~ @ 24) 10))
             (mouse 1)
             (blit 64 0 79 175 3 (+ 9 (* (: 101) 46)) 8 0)
             (proc 31)
             (mouse 0)
             (proc 30)))))
        (else
         (<>
          (mouse 1)
          (blit 64 0 79 175 3 (+ 9 (* (: 101) 46)) 8 0)
          (set-arr~ @ 27 0)
          (set-var J (~ @ 22))
          (set-var N (~ J (+ (* (~ @ 23) 2) 1)))
          (set-arr~ @ 20 (+ (&& (~ @ 20) 65280) 0))
          (set-arr~ @ 21 (+ 256 16))
          (set-arr~ @ 20 (// (&& (~ @ 20) 65399) 128))
          (set-arr~ @ 20 (&& (~ @ 20) 4095))
          (color 8)
          (set-arr~ @ 6 0)
          (set-arr~ @ 13 15 322 64 391)
          (clear)
          (text-color 7)
          (set-arr~ @ 9 (&& (~ @ 9) 65533)))))))
    (define-proc 33 (<>))
    (define-proc 34
      (<>
       (if-else (!= (~ @ 23) 0)
         (<> (proc 30) (set-arr~ @ 23 (- (~ @ 23) 1)) (proc 30))
         (<>
          (if (!= (~ @ 24) 0)
            (<>
             (set-arr~ @ 24 (- (~ @ 24) 10))
             (mouse 1)
             (blit 64 0 79 175 3 (+ 9 (* (: 101) 46)) 8 0)
             (proc 31)
             (mouse 0)
             (proc 30)))))))
    (define-proc 35
      (<>
       (set-var J (~ @ 22))
       (if-else (!= (~ J (+ (* (+ (~ @ 23) 1) 2) 1)) 0)
         (<> (proc 30) (set-arr~ @ 23 (+ (~ @ 23) 1)) (proc 30))
         (<>
          (if (> (~ @ 26) (+ (~ @ 24) 10))
            (<>
             (set-arr~ @ 24 (+ (~ @ 24) 10))
             (mouse 1)
             (blit 64 0 79 175 3 (+ 9 (* (: 101) 46)) 8 0)
             (proc 31)
             (mouse 0)
             (proc 30)))))))
    (define-proc 36 (<>))
    (define-proc 37 (<>))
    (define-proc 38
      (<>
       (mouse 1)
       (set-arr~ @ 9 (// (~ @ 9) 2))
       (set-arr~ @ 13 0 0 79 399)
       (set-arr~ @ 25 10)
       (set-arr~ @ 24 0)
       (set-arr~ @ 23 0)
       (blit (+ 9 (* (: 101) 46)) 8 (+ 24 (* (: 101) 46)) 183 0 64 0 3)
       (proc 31)
       (mouse 4 49152)
       (mouse 0)
       (proc 30)))
    (define-proc 39
      (<>
       (mouse 2)
       (set-var X (~ @ 10))
       (set-var Y (~ @ 11))
       (set-var K 65535)
       (set-var I 0)
       (while
        (!= I 10)
        (<>
         (set-var J (~ @ 22))
         (if (&&
              (> X (* (+ 9 (* (: 101) 46)) 8))
              (< X (* (+ 24 (* (: 101) 46)) 8))
              (> Y (+ (+ (* I 16) 8) 8))
              (< Y (+ (* I 16) 23 8))
              (!= (~ J (+ (* I 2) 1)) 0))
           (<> (set-var K I) (break)))
         (set-var I (+ I 1))))
       (if (&& (!= K 65535) (!= (~ @ 23) K))
         (<> (proc 30) (set-arr~ @ 23 K) (proc 30)))))))
 (define-proc 19
   (<>
    (mouse 1)
    (set-arr~ @ 6 0)
    (image "m_waku.pd8")
    (set-arr~ @ 13 28 48 65 127)
    (color 8)
    (clear)))
 (define-proc 20 (<> (blit (* 0 12) 80 (+ (* 0 12) 11) 99 3 0 0 0)))
 (define-proc 21 (<> (blit (* 1 12) 80 (+ (* 1 12) 11) 99 3 0 0 0)))
 (define-proc 22 (<> (blit (* 3 12) 80 (+ (* 3 12) 11) 99 3 0 0 0)))
 (define-proc 23 (<> (blit (* 2 12) 80 (+ (* 2 12) 11) 99 3 0 0 0)))
 (define-proc 24
   (<>
    (set-var I 0)
    (while
     (!= I (/ (~ @ 97) 2))
     (<>
      (blit
       (~ @ 94)
       (+ (~ @ 95) (* I 2))
       (- (+ (~ @ 94) (~ @ 96)) 1)
       (+ (~ @ 95) (* I 2))
       1
       (~ @ 94)
       (+ (~ @ 95) (* I 2))
       0)
      (blit
       (~ @ 94)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       (- (+ (~ @ 94) (~ @ 96)) 1)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       1
       (~ @ 94)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       0)
      (set-var I (+ I 1))
      (if (== I (/ (~ @ 97) 4)) (<> (palette 2)))))
    (if (== (&& (~ @ 97) 1) 1)
      (<>
       (blit
        (~ @ 94)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        (- (+ (~ @ 94) (~ @ 96)) 1)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        1
        (~ @ 94)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        0)))
    (set-arr~ @ 6 0)))
 (define-proc 25
   (<>
    (set-var I 0)
    (while
     (!= I (/ (~ @ 97) 2))
     (<>
      (blit-mask
       (~ @ 94)
       (+ (~ @ 95) (* I 2))
       (- (+ (~ @ 94) (~ @ 96)) 1)
       (+ (~ @ 95) (* I 2))
       1
       (~ @ 94)
       (+ (~ @ 95) (* I 2))
       0)
      (blit-mask
       (~ @ 94)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       (- (+ (~ @ 94) (~ @ 96)) 1)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       1
       (~ @ 94)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       0)
      (set-var I (+ I 1))
      (if (== I (/ (~ @ 97) 2)) (<> (palette 2)))))
    (if (== (&& (~ @ 97) 1) 1)
      (<>
       (blit-mask
        (~ @ 94)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        (- (+ (~ @ 94) (~ @ 96)) 1)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        1
        (~ @ 94)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        0)))
    (set-arr~ @ 6 0)))
 (define-proc 26
   (<>
    (sound 1)
    (set-var J (~ @ 7))
    (set-arr~ @ 7 2)
    (cond
     ((== I 0) (<> (load "O_1.M" (~ @ 3))))
     ((== I 1) (<> (load "O_2.M" (~ @ 3))))
     ((== I 2) (<> (load "O_3.M" (~ @ 3))))
     ((== I 3) (<> (load "AKO.M" (~ @ 3))))
     ((== I 4) (<> (load "BELL.M" (~ @ 3))))
     ((== I 5) (<> (load "CHAIME.M" (~ @ 3))))
     ((== I 6) (<> (load "CHIHARU.M" (~ @ 3))))
     ((== I 7) (<> (load "CLICK.M" (~ @ 3))))
     ((== I 8) (<> (load "COCKOO.M" (~ @ 3))))
     ((== I 9) (<> (load "DO!HYAN.M" (~ @ 3))))
     ((== I 10) (<> (load "EFFE1.M" (~ @ 3))))
     ((== I 11) (<> (load "EFFE2.M" (~ @ 3))))
     ((== I 12) (<> (load "EFFE3.M" (~ @ 3))))
     ((== I 13) (<> (load "EFFE4.M" (~ @ 3))))
     ((== I 14) (<> (load "ENDING.M" (~ @ 3))))
     ((== I 15) (<> (load "G-G1.M" (~ @ 3))))
     ((== I 16) (<> (load "G-G2.M" (~ @ 3))))
     ((== I 17) (<> (load "G-G3.M" (~ @ 3))))
     ((== I 18) (<> (load "HIROMI.M" (~ @ 3))))
     ((== I 19) (<> (load "IDO_1.M" (~ @ 3))))
     ((== I 20) (<> (load "ITTA_ATO.M" (~ @ 3))))
     ((== I 21) (<> (load "JO_SE.M" (~ @ 3))))
     ((== I 22) (<> (load "KAORI.M" (~ @ 3))))
     ((== I 23) (<> (load "KURUMI_2.M" (~ @ 3))))
     ((== I 24) (<> (load "MAI_4.M" (~ @ 3))))
     ((== I 25) (<> (load "MAKO.M" (~ @ 3))))
     ((== I 26) (<> (load "MATSU_2.M" (~ @ 3))))
     ((== I 27) (<> (load "MIHO.M" (~ @ 3))))
     ((== I 28) (<> (load "MISA.M" (~ @ 3))))
     ((== I 29) (<> (load "M_BOX.M" (~ @ 3))))
     ((== I 30) (<> (load "NATUKO.M" (~ @ 3))))
     ((== I 31) (<> (load "OBAKEYA.M" (~ @ 3))))
     ((== I 32) (<> (load "PHOTO.M" (~ @ 3))))
     ((== I 33) (<> (load "PIANO.M" (~ @ 3))))
     ((== I 34) (<> (load "PIANO_3.M" (~ @ 3))))
     ((== I 35) (<> (load "POOL.M" (~ @ 3))))
     ((== I 36) (<> (load "POOL2.M" (~ @ 3))))
     ((== I 37) (<> (load "PUNCH.M" (~ @ 3))))
     ((== I 38) (<> (load "REIKO.M" (~ @ 3))))
     ((== I 39) (<> (load "ROOM_1.M" (~ @ 3))))
     ((== I 40) (<> (load "ROOM_2.M" (~ @ 3))))
     ((== I 41) (<> (load "ROOM_3.M" (~ @ 3))))
     ((== I 42) (<> (load "SATOMI.M" (~ @ 3))))
     ((== I 43) (<> (load "SCHOOL.M" (~ @ 3))))
     ((== I 44) (<> (load "SIPPORI.M" (~ @ 3))))
     ((== I 45) (<> (load "SOTUGYOU.M" (~ @ 3))))
     ((== I 46) (<> (load "TAKE.M" (~ @ 3))))
     ((== I 47) (<> (load "TAKE2.M" (~ @ 3))))
     ((== I 48) (<> (load "TARO.M" (~ @ 3))))
     ((== I 49) (<> (load "TEL.M" (~ @ 3))))
     ((== I 50) (<> (load "TOWN.M" (~ @ 3))))
     ((== I 51) (<> (load "UME_6.M" (~ @ 3))))
     ((== I 52) (<> (load "VIOLIN2.M" (~ @ 3))))
     ((== I 53) (<> (load "VIOLIN_3.M" (~ @ 3))))
     ((== I 54) (<> (load "VISUAL1.M" (~ @ 3))))
     ((== I 55) (<> (load "VISUAL2.M" (~ @ 3))))
     ((== I 56) (<> (load "VISUAL3.M" (~ @ 3))))
     ((== I 57) (<> (load "WALTZ.M" (~ @ 3))))
     ((== I 58) (<> (load "WINDOW.M" (~ @ 3))))
     ((== I 59) (<> (load "YAYOI_2.M" (~ @ 3))))
     ((== I 60) (<> (load "YOSHIKO.M" (~ @ 3))))
     ((== I 61) (<> (load "YUENCHI.M" (~ @ 3))))
     ((== I 62) (<> (load "ZATOO.M" (~ @ 3)))))
    (set-arr~ @ 7 J)
    (sound 0)))
 (define-proc 27
   (<>
    (blit-mask
     (~ @ 94)
     (~ @ 95)
     (- (+ (~ @ 94) (~ @ 96)) 1)
     (- (+ (~ @ 95) (~ @ 97)) 1)
     2
     (~ @ 94)
     (~ @ 95)
     1)
    (set-arr~ @ 94 8 0 64 288)
    (set-arr~ @ 6 0)))
 (define-proc 9
   (<>
    (palette 2)
    (set-var I 0)
    (while
     (!= I (/ (~ @ 97) 2))
     (<>
      (blit
       (~ @ 94)
       (+ (~ @ 95) (* I 2))
       (- (+ (~ @ 94) (~ @ 96)) 1)
       (+ (~ @ 95) (* I 2))
       1
       (~ @ 94)
       (+ (~ @ 95) (* I 2))
       0)
      (blit
       (~ @ 94)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       (- (+ (~ @ 94) (~ @ 96)) 1)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       1
       (~ @ 94)
       (- (+ (~ @ 95) (* (/ (~ @ 97) 2) 2)) 1 (* I 2))
       0)
      (set-var I (+ I 1))))
    (if (== (&& (~ @ 97) 1) 1)
      (<>
       (blit
        (~ @ 94)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        (- (+ (~ @ 94) (~ @ 96)) 1)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        1
        (~ @ 94)
        (- (+ (~ @ 95) (~ @ 97)) 1)
        0)))
    (set-arr~ @ 6 0)))
 (define-proc 0
   (<>
    (set-arr~ @ 9 (// (~ @ 9) 8))
    (call (~ @ 0))
    (set-arr~ @ 9 (&& (~ @ 9) 65527))))
 (set-arr~ @ 99 (~ @ 98))
 (mes-jump "start1.mes"))